// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ express –∏ socket.io 
const app = require('express')();
const server = require('http').Server(app);
const io = require('socket.io')(server);
const escape_html = require('escape-html');
const path = require('path'); 
const port = 8080; 

let name, botMessage, unicalName;

// –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π 
let users = [{id: 12345, name:"–ì–æ–≤–æ—Ä—É–Ω"}];
// –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π 
let messages = []; 
let botMessages = ["–ß–µ –º–æ–ª—á–∏–º? üòÅ", "C–∫—É—á–Ω–æ üò°", "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç üò§"]; 

app.get('/', function (req, res) {
    res.sendFile(path.join(__dirname, 'auth.html')); 
});

setInterval(() => {
	// –±–æ—Ç-–≥–æ–≤–æ—Ä—É–Ω, –≥–æ–≤–æ—Ä–∏—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º–∫—Å–µ–∫)
    botMessage = botMessages[Math.round(Math.random() * (botMessages.length - 1))];
    messages.push({text: botMessage, author: users[0].name});
    io.sockets.emit('chat message', {text: botMessage, author: users[0].name});
}, 60000);

app.get('/:id', function (req, res) {

    if (req.params.id == 'client.js') {
        res.sendFile(path.join(__dirname, 'client.js'));
    }
    else if (req.params.id == 'favicon.ico') {
        res.sendStatus(404); 
    }
    else {
        name = escape_html(req.params.id).substring(0,50);
        res.sendFile(path.join(__dirname, 'index.html'));
    }

});

// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', function (socket) {

        //–≤—Å—Ç–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        unicalName = true;
        users.map(item => {
            if(item.name == name){
                unicalName = false;
            }
        });

        if(unicalName){

            users.push({id: socket.id, name});
            // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 
            socket.on('send message', function (data) {
                // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                messages.push({text: escape_html(data.text), author: escape_html(data.author)});

                // —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ chat message –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º 
                io.sockets.emit('chat message', {text: escape_html(data.text), author: escape_html(data.author)});
            });

            // –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è 
            socket.on('disconnect', function (data) {

                // —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
                // —Ç—É—Ç –≥–æ–≤–Ω–æ–∫–æ–¥, —Å —É—Ç—Ä–∞ –ø–æ–∫–æ–ª—É–ø–∞—Ç—å:
                let index;
                users.forEach((item, i) => {
                    if(item.id == socket.id){
                        index = i;
                    }
                });

                users.splice(index, 1);

                // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ 
                io.sockets.emit('users loaded', { users })

                console.log('Disconnected: %s users connected', users.length);
            });

            // –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç 
            socket.emit('new user', { name: users[users.length - 1]["name"] });
            
        }else{
            socket.emit('nickerror', { error: "–ù–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"});
        }
    
        console.log(users);
        console.log(socket.id);
        console.log('Connected: %s users connected', users.length);

        // –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        socket.on('load users', function () {
            console.log(users)
            io.sockets.emit('users loaded', { users })
        });

        // –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        socket.on('load messages', function () {
            socket.emit('messages loaded', { messages })
        });

}); 

server.listen(port, function () {
    console.log('app running on port ' + port);
})